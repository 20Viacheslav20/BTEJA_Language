//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from MyLanguageGrammar.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class MyLanguageGrammarLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, MODULE=13, IMPORT=14, VARIABLES=15, INT=16, 
		INT_L=17, REAL=18, REAL_L=19, STR=20, STR_L=21, ARRAY=22, OF=23, BOOL=24, 
		BOOL_L=25, TRUE=26, FALSE=27, PROCEDURE=28, IF=29, THEN=30, ELSIF=31, 
		ELSE=32, WHILE=33, DO=34, START=35, END=36, RETURN=37, SEMI=38, COMMA=39, 
		LPAREN=40, RPAREN=41, EQ=42, COLON=43, PERIOD=44, IDENT_L=45, WS=46;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "MODULE", "IMPORT", "VARIABLES", "INT", "INT_L", 
		"REAL", "REAL_L", "STR", "STR_L", "ARRAY", "OF", "BOOL", "BOOL_L", "TRUE", 
		"FALSE", "PROCEDURE", "IF", "THEN", "ELSIF", "ELSE", "WHILE", "DO", "START", 
		"END", "RETURN", "SEMI", "COMMA", "LPAREN", "RPAREN", "EQ", "COLON", "PERIOD", 
		"IDENT_L", "WS"
	};


	public MyLanguageGrammarLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public MyLanguageGrammarLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'+'", "'-'", "'OR'", "'*'", "'/'", "'&'", "'='", "'<'", "'<='", 
		"'>'", "'>='", "'~'", "'MODULE'", "'IMPORT'", "'VARIABLES'", "'INT'", 
		null, "'REAL'", null, "'STR'", null, "'ARRAY'", "'OF'", "'BOOL'", null, 
		"'TRUE'", "'FALSE'", "'PROCEDURE'", "'IF'", "'THEN'", "'ELSIF'", "'ELSE'", 
		"'WHILE'", "'DO'", "'START'", "'END'", "'RETURN'", "';'", "','", "'('", 
		"')'", "':='", "':'", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "MODULE", "IMPORT", "VARIABLES", "INT", "INT_L", "REAL", "REAL_L", 
		"STR", "STR_L", "ARRAY", "OF", "BOOL", "BOOL_L", "TRUE", "FALSE", "PROCEDURE", 
		"IF", "THEN", "ELSIF", "ELSE", "WHILE", "DO", "START", "END", "RETURN", 
		"SEMI", "COMMA", "LPAREN", "RPAREN", "EQ", "COLON", "PERIOD", "IDENT_L", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MyLanguageGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MyLanguageGrammarLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,46,295,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,3,1,3,
		1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,10,1,11,
		1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,
		1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,
		1,15,1,16,4,16,150,8,16,11,16,12,16,151,1,17,1,17,1,17,1,17,1,17,1,18,
		4,18,160,8,18,11,18,12,18,161,1,18,1,18,4,18,166,8,18,11,18,12,18,167,
		1,19,1,19,1,19,1,19,1,20,1,20,5,20,176,8,20,10,20,12,20,179,9,20,1,20,
		1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,23,1,23,
		1,23,1,24,1,24,3,24,199,8,24,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,
		26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,
		28,1,28,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,
		31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,34,1,
		34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,
		36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,41,1,42,1,
		42,1,43,1,43,1,44,1,44,5,44,284,8,44,10,44,12,44,287,9,44,1,45,4,45,290,
		8,45,11,45,12,45,291,1,45,1,45,1,177,0,46,1,1,3,2,5,3,7,4,9,5,11,6,13,
		7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,
		39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,
		63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,
		87,44,89,45,91,46,1,0,4,1,0,48,57,3,0,65,90,95,95,97,122,4,0,48,57,65,
		90,95,95,97,122,3,0,9,10,13,13,32,32,301,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,
		0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,
		17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,
		0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,
		0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,
		1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,
		0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,
		1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,
		0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,1,93,
		1,0,0,0,3,95,1,0,0,0,5,97,1,0,0,0,7,100,1,0,0,0,9,102,1,0,0,0,11,104,1,
		0,0,0,13,106,1,0,0,0,15,108,1,0,0,0,17,110,1,0,0,0,19,113,1,0,0,0,21,115,
		1,0,0,0,23,118,1,0,0,0,25,120,1,0,0,0,27,127,1,0,0,0,29,134,1,0,0,0,31,
		144,1,0,0,0,33,149,1,0,0,0,35,153,1,0,0,0,37,159,1,0,0,0,39,169,1,0,0,
		0,41,173,1,0,0,0,43,182,1,0,0,0,45,188,1,0,0,0,47,191,1,0,0,0,49,198,1,
		0,0,0,51,200,1,0,0,0,53,205,1,0,0,0,55,211,1,0,0,0,57,221,1,0,0,0,59,224,
		1,0,0,0,61,229,1,0,0,0,63,235,1,0,0,0,65,240,1,0,0,0,67,246,1,0,0,0,69,
		249,1,0,0,0,71,255,1,0,0,0,73,259,1,0,0,0,75,266,1,0,0,0,77,268,1,0,0,
		0,79,270,1,0,0,0,81,272,1,0,0,0,83,274,1,0,0,0,85,277,1,0,0,0,87,279,1,
		0,0,0,89,281,1,0,0,0,91,289,1,0,0,0,93,94,5,43,0,0,94,2,1,0,0,0,95,96,
		5,45,0,0,96,4,1,0,0,0,97,98,5,79,0,0,98,99,5,82,0,0,99,6,1,0,0,0,100,101,
		5,42,0,0,101,8,1,0,0,0,102,103,5,47,0,0,103,10,1,0,0,0,104,105,5,38,0,
		0,105,12,1,0,0,0,106,107,5,61,0,0,107,14,1,0,0,0,108,109,5,60,0,0,109,
		16,1,0,0,0,110,111,5,60,0,0,111,112,5,61,0,0,112,18,1,0,0,0,113,114,5,
		62,0,0,114,20,1,0,0,0,115,116,5,62,0,0,116,117,5,61,0,0,117,22,1,0,0,0,
		118,119,5,126,0,0,119,24,1,0,0,0,120,121,5,77,0,0,121,122,5,79,0,0,122,
		123,5,68,0,0,123,124,5,85,0,0,124,125,5,76,0,0,125,126,5,69,0,0,126,26,
		1,0,0,0,127,128,5,73,0,0,128,129,5,77,0,0,129,130,5,80,0,0,130,131,5,79,
		0,0,131,132,5,82,0,0,132,133,5,84,0,0,133,28,1,0,0,0,134,135,5,86,0,0,
		135,136,5,65,0,0,136,137,5,82,0,0,137,138,5,73,0,0,138,139,5,65,0,0,139,
		140,5,66,0,0,140,141,5,76,0,0,141,142,5,69,0,0,142,143,5,83,0,0,143,30,
		1,0,0,0,144,145,5,73,0,0,145,146,5,78,0,0,146,147,5,84,0,0,147,32,1,0,
		0,0,148,150,7,0,0,0,149,148,1,0,0,0,150,151,1,0,0,0,151,149,1,0,0,0,151,
		152,1,0,0,0,152,34,1,0,0,0,153,154,5,82,0,0,154,155,5,69,0,0,155,156,5,
		65,0,0,156,157,5,76,0,0,157,36,1,0,0,0,158,160,7,0,0,0,159,158,1,0,0,0,
		160,161,1,0,0,0,161,159,1,0,0,0,161,162,1,0,0,0,162,163,1,0,0,0,163,165,
		5,46,0,0,164,166,7,0,0,0,165,164,1,0,0,0,166,167,1,0,0,0,167,165,1,0,0,
		0,167,168,1,0,0,0,168,38,1,0,0,0,169,170,5,83,0,0,170,171,5,84,0,0,171,
		172,5,82,0,0,172,40,1,0,0,0,173,177,5,34,0,0,174,176,9,0,0,0,175,174,1,
		0,0,0,176,179,1,0,0,0,177,178,1,0,0,0,177,175,1,0,0,0,178,180,1,0,0,0,
		179,177,1,0,0,0,180,181,5,34,0,0,181,42,1,0,0,0,182,183,5,65,0,0,183,184,
		5,82,0,0,184,185,5,82,0,0,185,186,5,65,0,0,186,187,5,89,0,0,187,44,1,0,
		0,0,188,189,5,79,0,0,189,190,5,70,0,0,190,46,1,0,0,0,191,192,5,66,0,0,
		192,193,5,79,0,0,193,194,5,79,0,0,194,195,5,76,0,0,195,48,1,0,0,0,196,
		199,3,51,25,0,197,199,3,53,26,0,198,196,1,0,0,0,198,197,1,0,0,0,199,50,
		1,0,0,0,200,201,5,84,0,0,201,202,5,82,0,0,202,203,5,85,0,0,203,204,5,69,
		0,0,204,52,1,0,0,0,205,206,5,70,0,0,206,207,5,65,0,0,207,208,5,76,0,0,
		208,209,5,83,0,0,209,210,5,69,0,0,210,54,1,0,0,0,211,212,5,80,0,0,212,
		213,5,82,0,0,213,214,5,79,0,0,214,215,5,67,0,0,215,216,5,69,0,0,216,217,
		5,68,0,0,217,218,5,85,0,0,218,219,5,82,0,0,219,220,5,69,0,0,220,56,1,0,
		0,0,221,222,5,73,0,0,222,223,5,70,0,0,223,58,1,0,0,0,224,225,5,84,0,0,
		225,226,5,72,0,0,226,227,5,69,0,0,227,228,5,78,0,0,228,60,1,0,0,0,229,
		230,5,69,0,0,230,231,5,76,0,0,231,232,5,83,0,0,232,233,5,73,0,0,233,234,
		5,70,0,0,234,62,1,0,0,0,235,236,5,69,0,0,236,237,5,76,0,0,237,238,5,83,
		0,0,238,239,5,69,0,0,239,64,1,0,0,0,240,241,5,87,0,0,241,242,5,72,0,0,
		242,243,5,73,0,0,243,244,5,76,0,0,244,245,5,69,0,0,245,66,1,0,0,0,246,
		247,5,68,0,0,247,248,5,79,0,0,248,68,1,0,0,0,249,250,5,83,0,0,250,251,
		5,84,0,0,251,252,5,65,0,0,252,253,5,82,0,0,253,254,5,84,0,0,254,70,1,0,
		0,0,255,256,5,69,0,0,256,257,5,78,0,0,257,258,5,68,0,0,258,72,1,0,0,0,
		259,260,5,82,0,0,260,261,5,69,0,0,261,262,5,84,0,0,262,263,5,85,0,0,263,
		264,5,82,0,0,264,265,5,78,0,0,265,74,1,0,0,0,266,267,5,59,0,0,267,76,1,
		0,0,0,268,269,5,44,0,0,269,78,1,0,0,0,270,271,5,40,0,0,271,80,1,0,0,0,
		272,273,5,41,0,0,273,82,1,0,0,0,274,275,5,58,0,0,275,276,5,61,0,0,276,
		84,1,0,0,0,277,278,5,58,0,0,278,86,1,0,0,0,279,280,5,46,0,0,280,88,1,0,
		0,0,281,285,7,1,0,0,282,284,7,2,0,0,283,282,1,0,0,0,284,287,1,0,0,0,285,
		283,1,0,0,0,285,286,1,0,0,0,286,90,1,0,0,0,287,285,1,0,0,0,288,290,7,3,
		0,0,289,288,1,0,0,0,290,291,1,0,0,0,291,289,1,0,0,0,291,292,1,0,0,0,292,
		293,1,0,0,0,293,294,6,45,0,0,294,92,1,0,0,0,8,0,151,161,167,177,198,285,
		291,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
