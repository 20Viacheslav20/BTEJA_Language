//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from MyLanguageGrammar.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class MyLanguageGrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, MODULE=12, IMPORT=13, VARIABLES=14, INT=15, INT_L=16, 
		REAL=17, REAL_L=18, STR=19, STR_L=20, ARRAY=21, OF=22, PROCEDURE=23, IF=24, 
		THEN=25, ELSIF=26, ELSE=27, WHILE=28, DO=29, START=30, END=31, RETURN=32, 
		SEMI=33, COMMA=34, LPAREN=35, RPAREN=36, EQ=37, COLON=38, PERIOD=39, IDENT_L=40, 
		WS=41;
	public const int
		RULE_start = 0, RULE_module = 1, RULE_moduleStatements = 2, RULE_variablesDeclarationBlock = 3, 
		RULE_variablesDeclaration = 4, RULE_type = 5, RULE_procedure = 6, RULE_procedureDeclaration = 7, 
		RULE_procedureParameters = 8, RULE_procedureBody = 9, RULE_statement = 10, 
		RULE_procedureCall = 11, RULE_expression = 12, RULE_simpleExpression = 13, 
		RULE_addOperator = 14, RULE_relation = 15, RULE_term = 16, RULE_factor = 17, 
		RULE_literal = 18, RULE_assignment = 19, RULE_ifStatement = 20, RULE_elseIfStatement = 21, 
		RULE_elseStatement = 22, RULE_whileStatement = 23, RULE_returnStatement = 24;
	public static readonly string[] ruleNames = {
		"start", "module", "moduleStatements", "variablesDeclarationBlock", "variablesDeclaration", 
		"type", "procedure", "procedureDeclaration", "procedureParameters", "procedureBody", 
		"statement", "procedureCall", "expression", "simpleExpression", "addOperator", 
		"relation", "term", "factor", "literal", "assignment", "ifStatement", 
		"elseIfStatement", "elseStatement", "whileStatement", "returnStatement"
	};

	private static readonly string[] _LiteralNames = {
		null, "'+'", "'-'", "'='", "'<'", "'<='", "'>'", "'>='", "'*'", "'/'", 
		"'&'", "'~'", "'MODULE'", "'IMPORT'", "'VARIABLES'", "'INT'", null, "'REAL'", 
		null, "'STR'", null, "'ARRAY'", "'OF'", "'PROCEDURE'", "'IF'", "'THEN'", 
		"'ELSIF'", "'ELSE'", "'WHILE'", "'DO'", "'START'", "'END'", "'RETURN'", 
		"';'", "','", "'('", "')'", "':='", "':'", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"MODULE", "IMPORT", "VARIABLES", "INT", "INT_L", "REAL", "REAL_L", "STR", 
		"STR_L", "ARRAY", "OF", "PROCEDURE", "IF", "THEN", "ELSIF", "ELSE", "WHILE", 
		"DO", "START", "END", "RETURN", "SEMI", "COMMA", "LPAREN", "RPAREN", "EQ", 
		"COLON", "PERIOD", "IDENT_L", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MyLanguageGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MyLanguageGrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MyLanguageGrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MyLanguageGrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ModuleContext module() {
			return GetRuleContext<ModuleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(MyLanguageGrammarParser.Eof, 0); }
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyLanguageGrammarVisitor<TResult> typedVisitor = visitor as IMyLanguageGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(Context, State);
		EnterRule(_localctx, 0, RULE_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 50;
			module();
			State = 51;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODULE() { return GetToken(MyLanguageGrammarParser.MODULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT_L() { return GetToken(MyLanguageGrammarParser.IDENT_L, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(MyLanguageGrammarParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERIOD() { return GetToken(MyLanguageGrammarParser.PERIOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ModuleStatementsContext moduleStatements() {
			return GetRuleContext<ModuleStatementsContext>(0);
		}
		public ModuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyLanguageGrammarVisitor<TResult> typedVisitor = visitor as IMyLanguageGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleContext module() {
		ModuleContext _localctx = new ModuleContext(Context, State);
		EnterRule(_localctx, 2, RULE_module);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 53;
			Match(MODULE);
			State = 54;
			Match(IDENT_L);
			State = 55;
			Match(SEMI);
			State = 57;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1082155008L) != 0)) {
				{
				State = 56;
				moduleStatements();
				}
			}

			State = 59;
			Match(PERIOD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleStatementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureBodyContext procedureBody() {
			return GetRuleContext<ProcedureBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENT_L() { return GetTokens(MyLanguageGrammarParser.IDENT_L); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT_L(int i) {
			return GetToken(MyLanguageGrammarParser.IDENT_L, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IMPORT() { return GetTokens(MyLanguageGrammarParser.IMPORT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT(int i) {
			return GetToken(MyLanguageGrammarParser.IMPORT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(MyLanguageGrammarParser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(MyLanguageGrammarParser.SEMI, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariablesDeclarationBlockContext variablesDeclarationBlock() {
			return GetRuleContext<VariablesDeclarationBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureContext[] procedure() {
			return GetRuleContexts<ProcedureContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureContext procedure(int i) {
			return GetRuleContext<ProcedureContext>(i);
		}
		public ModuleStatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleStatements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyLanguageGrammarVisitor<TResult> typedVisitor = visitor as IMyLanguageGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleStatements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleStatementsContext moduleStatements() {
		ModuleStatementsContext _localctx = new ModuleStatementsContext(Context, State);
		EnterRule(_localctx, 4, RULE_moduleStatements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 66;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IMPORT) {
				{
				{
				State = 61;
				Match(IMPORT);
				State = 62;
				Match(IDENT_L);
				State = 63;
				Match(SEMI);
				}
				}
				State = 68;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 70;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VARIABLES) {
				{
				State = 69;
				variablesDeclarationBlock();
				}
			}

			State = 75;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PROCEDURE) {
				{
				{
				State = 72;
				procedure();
				}
				}
				State = 77;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 78;
			procedureBody();
			State = 79;
			Match(IDENT_L);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariablesDeclarationBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLES() { return GetToken(MyLanguageGrammarParser.VARIABLES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariablesDeclarationContext[] variablesDeclaration() {
			return GetRuleContexts<VariablesDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariablesDeclarationContext variablesDeclaration(int i) {
			return GetRuleContext<VariablesDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(MyLanguageGrammarParser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(MyLanguageGrammarParser.SEMI, i);
		}
		public VariablesDeclarationBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variablesDeclarationBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyLanguageGrammarVisitor<TResult> typedVisitor = visitor as IMyLanguageGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariablesDeclarationBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariablesDeclarationBlockContext variablesDeclarationBlock() {
		VariablesDeclarationBlockContext _localctx = new VariablesDeclarationBlockContext(Context, State);
		EnterRule(_localctx, 6, RULE_variablesDeclarationBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81;
			Match(VARIABLES);
			State = 85;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 82;
				variablesDeclaration();
				State = 83;
				Match(SEMI);
				}
				}
				State = 87;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==IDENT_L );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariablesDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENT_L() { return GetTokens(MyLanguageGrammarParser.IDENT_L); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT_L(int i) {
			return GetToken(MyLanguageGrammarParser.IDENT_L, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(MyLanguageGrammarParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MyLanguageGrammarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MyLanguageGrammarParser.COMMA, i);
		}
		public VariablesDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variablesDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyLanguageGrammarVisitor<TResult> typedVisitor = visitor as IMyLanguageGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariablesDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariablesDeclarationContext variablesDeclaration() {
		VariablesDeclarationContext _localctx = new VariablesDeclarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_variablesDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89;
			Match(IDENT_L);
			State = 94;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 90;
				Match(COMMA);
				State = 91;
				Match(IDENT_L);
				}
				}
				State = 96;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 97;
			Match(COLON);
			State = 98;
			type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(MyLanguageGrammarParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL() { return GetToken(MyLanguageGrammarParser.REAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STR() { return GetToken(MyLanguageGrammarParser.STR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(MyLanguageGrammarParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_L() { return GetToken(MyLanguageGrammarParser.INT_L, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(MyLanguageGrammarParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyLanguageGrammarVisitor<TResult> typedVisitor = visitor as IMyLanguageGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 10, RULE_type);
		try {
			State = 107;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 100;
				Match(INT);
				}
				break;
			case REAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 101;
				Match(REAL);
				}
				break;
			case STR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 102;
				Match(STR);
				}
				break;
			case ARRAY:
				EnterOuterAlt(_localctx, 4);
				{
				State = 103;
				Match(ARRAY);
				State = 104;
				Match(INT_L);
				State = 105;
				Match(OF);
				State = 106;
				type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureDeclarationContext procedureDeclaration() {
			return GetRuleContext<ProcedureDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureBodyContext procedureBody() {
			return GetRuleContext<ProcedureBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(MyLanguageGrammarParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariablesDeclarationBlockContext variablesDeclarationBlock() {
			return GetRuleContext<VariablesDeclarationBlockContext>(0);
		}
		public ProcedureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedure; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyLanguageGrammarVisitor<TResult> typedVisitor = visitor as IMyLanguageGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureContext procedure() {
		ProcedureContext _localctx = new ProcedureContext(Context, State);
		EnterRule(_localctx, 12, RULE_procedure);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109;
			procedureDeclaration();
			State = 111;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VARIABLES) {
				{
				State = 110;
				variablesDeclarationBlock();
				}
			}

			State = 113;
			procedureBody();
			State = 114;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(MyLanguageGrammarParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT_L() { return GetToken(MyLanguageGrammarParser.IDENT_L, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MyLanguageGrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureParametersContext procedureParameters() {
			return GetRuleContext<ProcedureParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MyLanguageGrammarParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(MyLanguageGrammarParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ProcedureDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyLanguageGrammarVisitor<TResult> typedVisitor = visitor as IMyLanguageGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureDeclarationContext procedureDeclaration() {
		ProcedureDeclarationContext _localctx = new ProcedureDeclarationContext(Context, State);
		EnterRule(_localctx, 14, RULE_procedureDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116;
			Match(PROCEDURE);
			State = 117;
			Match(IDENT_L);
			State = 122;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAREN) {
				{
				State = 118;
				Match(LPAREN);
				State = 119;
				procedureParameters();
				State = 120;
				Match(RPAREN);
				}
			}

			State = 126;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 124;
				Match(COLON);
				State = 125;
				type();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariablesDeclarationContext[] variablesDeclaration() {
			return GetRuleContexts<VariablesDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariablesDeclarationContext variablesDeclaration(int i) {
			return GetRuleContext<VariablesDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MyLanguageGrammarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MyLanguageGrammarParser.COMMA, i);
		}
		public ProcedureParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyLanguageGrammarVisitor<TResult> typedVisitor = visitor as IMyLanguageGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureParametersContext procedureParameters() {
		ProcedureParametersContext _localctx = new ProcedureParametersContext(Context, State);
		EnterRule(_localctx, 16, RULE_procedureParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128;
			variablesDeclaration();
			State = 133;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 129;
				Match(COMMA);
				State = 130;
				variablesDeclaration();
				}
				}
				State = 135;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START() { return GetToken(MyLanguageGrammarParser.START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(MyLanguageGrammarParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ProcedureBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyLanguageGrammarVisitor<TResult> typedVisitor = visitor as IMyLanguageGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureBodyContext procedureBody() {
		ProcedureBodyContext _localctx = new ProcedureBodyContext(Context, State);
		EnterRule(_localctx, 18, RULE_procedureBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 136;
			Match(START);
			State = 140;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1104091807744L) != 0)) {
				{
				{
				State = 137;
				statement();
				}
				}
				State = 142;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 143;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(MyLanguageGrammarParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureCallContext procedureCall() {
			return GetRuleContext<ProcedureCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyLanguageGrammarVisitor<TResult> typedVisitor = visitor as IMyLanguageGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 150;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				State = 145;
				procedureCall();
				}
				break;
			case 2:
				{
				State = 146;
				assignment();
				}
				break;
			case 3:
				{
				State = 147;
				ifStatement();
				}
				break;
			case 4:
				{
				State = 148;
				whileStatement();
				}
				break;
			case 5:
				{
				State = 149;
				returnStatement();
				}
				break;
			}
			State = 152;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT_L() { return GetToken(MyLanguageGrammarParser.IDENT_L, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MyLanguageGrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MyLanguageGrammarParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MyLanguageGrammarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MyLanguageGrammarParser.COMMA, i);
		}
		public ProcedureCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyLanguageGrammarVisitor<TResult> typedVisitor = visitor as IMyLanguageGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureCallContext procedureCall() {
		ProcedureCallContext _localctx = new ProcedureCallContext(Context, State);
		EnterRule(_localctx, 22, RULE_procedureCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 154;
			Match(IDENT_L);
			State = 155;
			Match(LPAREN);
			State = 164;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1133872744454L) != 0)) {
				{
				State = 156;
				expression();
				State = 161;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 157;
					Match(COMMA);
					State = 158;
					expression();
					}
					}
					State = 163;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 166;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext[] simpleExpression() {
			return GetRuleContexts<SimpleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext simpleExpression(int i) {
			return GetRuleContext<SimpleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationContext relation() {
			return GetRuleContext<RelationContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyLanguageGrammarVisitor<TResult> typedVisitor = visitor as IMyLanguageGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 24, RULE_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168;
			simpleExpression();
			State = 172;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 248L) != 0)) {
				{
				State = 169;
				relation();
				State = 170;
				simpleExpression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AddOperatorContext[] addOperator() {
			return GetRuleContexts<AddOperatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AddOperatorContext addOperator(int i) {
			return GetRuleContext<AddOperatorContext>(i);
		}
		public SimpleExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyLanguageGrammarVisitor<TResult> typedVisitor = visitor as IMyLanguageGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleExpressionContext simpleExpression() {
		SimpleExpressionContext _localctx = new SimpleExpressionContext(Context, State);
		EnterRule(_localctx, 26, RULE_simpleExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 175;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0 || _la==T__1) {
				{
				State = 174;
				addOperator();
				}
			}

			State = 177;
			term();
			State = 183;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0 || _la==T__1) {
				{
				{
				State = 178;
				addOperator();
				State = 179;
				term();
				}
				}
				State = 185;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddOperatorContext : ParserRuleContext {
		public AddOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyLanguageGrammarVisitor<TResult> typedVisitor = visitor as IMyLanguageGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddOperatorContext addOperator() {
		AddOperatorContext _localctx = new AddOperatorContext(Context, State);
		EnterRule(_localctx, 28, RULE_addOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 186;
			_la = TokenStream.LA(1);
			if ( !(_la==T__0 || _la==T__1) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationContext : ParserRuleContext {
		public RelationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyLanguageGrammarVisitor<TResult> typedVisitor = visitor as IMyLanguageGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationContext relation() {
		RelationContext _localctx = new RelationContext(Context, State);
		EnterRule(_localctx, 30, RULE_relation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 188;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 248L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext[] factor() {
			return GetRuleContexts<FactorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor(int i) {
			return GetRuleContext<FactorContext>(i);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyLanguageGrammarVisitor<TResult> typedVisitor = visitor as IMyLanguageGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 32, RULE_term);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 190;
			factor();
			State = 195;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1792L) != 0)) {
				{
				{
				State = 191;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1792L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 192;
				factor();
				}
				}
				State = 197;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MyLanguageGrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MyLanguageGrammarParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureCallContext procedureCall() {
			return GetRuleContext<ProcedureCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT_L() { return GetToken(MyLanguageGrammarParser.IDENT_L, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyLanguageGrammarVisitor<TResult> typedVisitor = visitor as IMyLanguageGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 34, RULE_factor);
		try {
			State = 207;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 198;
				Match(T__10);
				State = 199;
				factor();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 200;
				Match(LPAREN);
				State = 201;
				expression();
				State = 202;
				Match(RPAREN);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 204;
				procedureCall();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 205;
				Match(IDENT_L);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 206;
				literal();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL_L() { return GetToken(MyLanguageGrammarParser.REAL_L, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_L() { return GetToken(MyLanguageGrammarParser.INT_L, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STR_L() { return GetToken(MyLanguageGrammarParser.STR_L, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyLanguageGrammarVisitor<TResult> typedVisitor = visitor as IMyLanguageGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 36, RULE_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1376256L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT_L() { return GetToken(MyLanguageGrammarParser.IDENT_L, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(MyLanguageGrammarParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyLanguageGrammarVisitor<TResult> typedVisitor = visitor as IMyLanguageGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 38, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 211;
			Match(IDENT_L);
			State = 212;
			Match(EQ);
			State = 213;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(MyLanguageGrammarParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(MyLanguageGrammarParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(MyLanguageGrammarParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseIfStatementContext elseIfStatement() {
			return GetRuleContext<ElseIfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseStatementContext elseStatement() {
			return GetRuleContext<ElseStatementContext>(0);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyLanguageGrammarVisitor<TResult> typedVisitor = visitor as IMyLanguageGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 40, RULE_ifStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 215;
			Match(IF);
			State = 216;
			expression();
			State = 217;
			Match(THEN);
			State = 221;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1104091807744L) != 0)) {
				{
				{
				State = 218;
				statement();
				}
				}
				State = 223;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 225;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSIF) {
				{
				State = 224;
				elseIfStatement();
				}
			}

			State = 228;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 227;
				elseStatement();
				}
			}

			State = 230;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSIF() { return GetToken(MyLanguageGrammarParser.ELSIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(MyLanguageGrammarParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ElseIfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIfStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyLanguageGrammarVisitor<TResult> typedVisitor = visitor as IMyLanguageGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfStatementContext elseIfStatement() {
		ElseIfStatementContext _localctx = new ElseIfStatementContext(Context, State);
		EnterRule(_localctx, 42, RULE_elseIfStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 232;
			Match(ELSIF);
			State = 233;
			expression();
			State = 234;
			Match(THEN);
			State = 238;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1104091807744L) != 0)) {
				{
				{
				State = 235;
				statement();
				}
				}
				State = 240;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(MyLanguageGrammarParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ElseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyLanguageGrammarVisitor<TResult> typedVisitor = visitor as IMyLanguageGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseStatementContext elseStatement() {
		ElseStatementContext _localctx = new ElseStatementContext(Context, State);
		EnterRule(_localctx, 44, RULE_elseStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 241;
			Match(ELSE);
			State = 245;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1104091807744L) != 0)) {
				{
				{
				State = 242;
				statement();
				}
				}
				State = 247;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(MyLanguageGrammarParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(MyLanguageGrammarParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(MyLanguageGrammarParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyLanguageGrammarVisitor<TResult> typedVisitor = visitor as IMyLanguageGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 46, RULE_whileStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 248;
			Match(WHILE);
			State = 249;
			expression();
			State = 250;
			Match(DO);
			State = 254;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1104091807744L) != 0)) {
				{
				{
				State = 251;
				statement();
				}
				}
				State = 256;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 257;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(MyLanguageGrammarParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyLanguageGrammarVisitor<TResult> typedVisitor = visitor as IMyLanguageGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 48, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 259;
			Match(RETURN);
			State = 260;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,41,263,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,1,0,1,0,1,0,1,1,1,1,1,1,1,1,3,1,58,8,1,1,
		1,1,1,1,2,1,2,1,2,5,2,65,8,2,10,2,12,2,68,9,2,1,2,3,2,71,8,2,1,2,5,2,74,
		8,2,10,2,12,2,77,9,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,4,3,86,8,3,11,3,12,3,
		87,1,4,1,4,1,4,5,4,93,8,4,10,4,12,4,96,9,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,
		1,5,1,5,1,5,3,5,108,8,5,1,6,1,6,3,6,112,8,6,1,6,1,6,1,6,1,7,1,7,1,7,1,
		7,1,7,1,7,3,7,123,8,7,1,7,1,7,3,7,127,8,7,1,8,1,8,1,8,5,8,132,8,8,10,8,
		12,8,135,9,8,1,9,1,9,5,9,139,8,9,10,9,12,9,142,9,9,1,9,1,9,1,10,1,10,1,
		10,1,10,1,10,3,10,151,8,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,5,11,160,
		8,11,10,11,12,11,163,9,11,3,11,165,8,11,1,11,1,11,1,12,1,12,1,12,1,12,
		3,12,173,8,12,1,13,3,13,176,8,13,1,13,1,13,1,13,1,13,5,13,182,8,13,10,
		13,12,13,185,9,13,1,14,1,14,1,15,1,15,1,16,1,16,1,16,5,16,194,8,16,10,
		16,12,16,197,9,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,208,
		8,17,1,18,1,18,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,5,20,220,8,20,10,
		20,12,20,223,9,20,1,20,3,20,226,8,20,1,20,3,20,229,8,20,1,20,1,20,1,21,
		1,21,1,21,1,21,5,21,237,8,21,10,21,12,21,240,9,21,1,22,1,22,5,22,244,8,
		22,10,22,12,22,247,9,22,1,23,1,23,1,23,1,23,5,23,253,8,23,10,23,12,23,
		256,9,23,1,23,1,23,1,24,1,24,1,24,1,24,0,0,25,0,2,4,6,8,10,12,14,16,18,
		20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,0,4,1,0,1,2,1,0,3,7,1,0,8,
		10,3,0,16,16,18,18,20,20,271,0,50,1,0,0,0,2,53,1,0,0,0,4,66,1,0,0,0,6,
		81,1,0,0,0,8,89,1,0,0,0,10,107,1,0,0,0,12,109,1,0,0,0,14,116,1,0,0,0,16,
		128,1,0,0,0,18,136,1,0,0,0,20,150,1,0,0,0,22,154,1,0,0,0,24,168,1,0,0,
		0,26,175,1,0,0,0,28,186,1,0,0,0,30,188,1,0,0,0,32,190,1,0,0,0,34,207,1,
		0,0,0,36,209,1,0,0,0,38,211,1,0,0,0,40,215,1,0,0,0,42,232,1,0,0,0,44,241,
		1,0,0,0,46,248,1,0,0,0,48,259,1,0,0,0,50,51,3,2,1,0,51,52,5,0,0,1,52,1,
		1,0,0,0,53,54,5,12,0,0,54,55,5,40,0,0,55,57,5,33,0,0,56,58,3,4,2,0,57,
		56,1,0,0,0,57,58,1,0,0,0,58,59,1,0,0,0,59,60,5,39,0,0,60,3,1,0,0,0,61,
		62,5,13,0,0,62,63,5,40,0,0,63,65,5,33,0,0,64,61,1,0,0,0,65,68,1,0,0,0,
		66,64,1,0,0,0,66,67,1,0,0,0,67,70,1,0,0,0,68,66,1,0,0,0,69,71,3,6,3,0,
		70,69,1,0,0,0,70,71,1,0,0,0,71,75,1,0,0,0,72,74,3,12,6,0,73,72,1,0,0,0,
		74,77,1,0,0,0,75,73,1,0,0,0,75,76,1,0,0,0,76,78,1,0,0,0,77,75,1,0,0,0,
		78,79,3,18,9,0,79,80,5,40,0,0,80,5,1,0,0,0,81,85,5,14,0,0,82,83,3,8,4,
		0,83,84,5,33,0,0,84,86,1,0,0,0,85,82,1,0,0,0,86,87,1,0,0,0,87,85,1,0,0,
		0,87,88,1,0,0,0,88,7,1,0,0,0,89,94,5,40,0,0,90,91,5,34,0,0,91,93,5,40,
		0,0,92,90,1,0,0,0,93,96,1,0,0,0,94,92,1,0,0,0,94,95,1,0,0,0,95,97,1,0,
		0,0,96,94,1,0,0,0,97,98,5,38,0,0,98,99,3,10,5,0,99,9,1,0,0,0,100,108,5,
		15,0,0,101,108,5,17,0,0,102,108,5,19,0,0,103,104,5,21,0,0,104,105,5,16,
		0,0,105,106,5,22,0,0,106,108,3,10,5,0,107,100,1,0,0,0,107,101,1,0,0,0,
		107,102,1,0,0,0,107,103,1,0,0,0,108,11,1,0,0,0,109,111,3,14,7,0,110,112,
		3,6,3,0,111,110,1,0,0,0,111,112,1,0,0,0,112,113,1,0,0,0,113,114,3,18,9,
		0,114,115,5,33,0,0,115,13,1,0,0,0,116,117,5,23,0,0,117,122,5,40,0,0,118,
		119,5,35,0,0,119,120,3,16,8,0,120,121,5,36,0,0,121,123,1,0,0,0,122,118,
		1,0,0,0,122,123,1,0,0,0,123,126,1,0,0,0,124,125,5,38,0,0,125,127,3,10,
		5,0,126,124,1,0,0,0,126,127,1,0,0,0,127,15,1,0,0,0,128,133,3,8,4,0,129,
		130,5,34,0,0,130,132,3,8,4,0,131,129,1,0,0,0,132,135,1,0,0,0,133,131,1,
		0,0,0,133,134,1,0,0,0,134,17,1,0,0,0,135,133,1,0,0,0,136,140,5,30,0,0,
		137,139,3,20,10,0,138,137,1,0,0,0,139,142,1,0,0,0,140,138,1,0,0,0,140,
		141,1,0,0,0,141,143,1,0,0,0,142,140,1,0,0,0,143,144,5,31,0,0,144,19,1,
		0,0,0,145,151,3,22,11,0,146,151,3,38,19,0,147,151,3,40,20,0,148,151,3,
		46,23,0,149,151,3,48,24,0,150,145,1,0,0,0,150,146,1,0,0,0,150,147,1,0,
		0,0,150,148,1,0,0,0,150,149,1,0,0,0,151,152,1,0,0,0,152,153,5,33,0,0,153,
		21,1,0,0,0,154,155,5,40,0,0,155,164,5,35,0,0,156,161,3,24,12,0,157,158,
		5,34,0,0,158,160,3,24,12,0,159,157,1,0,0,0,160,163,1,0,0,0,161,159,1,0,
		0,0,161,162,1,0,0,0,162,165,1,0,0,0,163,161,1,0,0,0,164,156,1,0,0,0,164,
		165,1,0,0,0,165,166,1,0,0,0,166,167,5,36,0,0,167,23,1,0,0,0,168,172,3,
		26,13,0,169,170,3,30,15,0,170,171,3,26,13,0,171,173,1,0,0,0,172,169,1,
		0,0,0,172,173,1,0,0,0,173,25,1,0,0,0,174,176,3,28,14,0,175,174,1,0,0,0,
		175,176,1,0,0,0,176,177,1,0,0,0,177,183,3,32,16,0,178,179,3,28,14,0,179,
		180,3,32,16,0,180,182,1,0,0,0,181,178,1,0,0,0,182,185,1,0,0,0,183,181,
		1,0,0,0,183,184,1,0,0,0,184,27,1,0,0,0,185,183,1,0,0,0,186,187,7,0,0,0,
		187,29,1,0,0,0,188,189,7,1,0,0,189,31,1,0,0,0,190,195,3,34,17,0,191,192,
		7,2,0,0,192,194,3,34,17,0,193,191,1,0,0,0,194,197,1,0,0,0,195,193,1,0,
		0,0,195,196,1,0,0,0,196,33,1,0,0,0,197,195,1,0,0,0,198,199,5,11,0,0,199,
		208,3,34,17,0,200,201,5,35,0,0,201,202,3,24,12,0,202,203,5,36,0,0,203,
		208,1,0,0,0,204,208,3,22,11,0,205,208,5,40,0,0,206,208,3,36,18,0,207,198,
		1,0,0,0,207,200,1,0,0,0,207,204,1,0,0,0,207,205,1,0,0,0,207,206,1,0,0,
		0,208,35,1,0,0,0,209,210,7,3,0,0,210,37,1,0,0,0,211,212,5,40,0,0,212,213,
		5,37,0,0,213,214,3,24,12,0,214,39,1,0,0,0,215,216,5,24,0,0,216,217,3,24,
		12,0,217,221,5,25,0,0,218,220,3,20,10,0,219,218,1,0,0,0,220,223,1,0,0,
		0,221,219,1,0,0,0,221,222,1,0,0,0,222,225,1,0,0,0,223,221,1,0,0,0,224,
		226,3,42,21,0,225,224,1,0,0,0,225,226,1,0,0,0,226,228,1,0,0,0,227,229,
		3,44,22,0,228,227,1,0,0,0,228,229,1,0,0,0,229,230,1,0,0,0,230,231,5,31,
		0,0,231,41,1,0,0,0,232,233,5,26,0,0,233,234,3,24,12,0,234,238,5,25,0,0,
		235,237,3,20,10,0,236,235,1,0,0,0,237,240,1,0,0,0,238,236,1,0,0,0,238,
		239,1,0,0,0,239,43,1,0,0,0,240,238,1,0,0,0,241,245,5,27,0,0,242,244,3,
		20,10,0,243,242,1,0,0,0,244,247,1,0,0,0,245,243,1,0,0,0,245,246,1,0,0,
		0,246,45,1,0,0,0,247,245,1,0,0,0,248,249,5,28,0,0,249,250,3,24,12,0,250,
		254,5,29,0,0,251,253,3,20,10,0,252,251,1,0,0,0,253,256,1,0,0,0,254,252,
		1,0,0,0,254,255,1,0,0,0,255,257,1,0,0,0,256,254,1,0,0,0,257,258,5,31,0,
		0,258,47,1,0,0,0,259,260,5,32,0,0,260,261,3,24,12,0,261,49,1,0,0,0,26,
		57,66,70,75,87,94,107,111,122,126,133,140,150,161,164,172,175,183,195,
		207,221,225,228,238,245,254
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
